/**
 * This class is generated by jOOQ
 */
package org.jooq.util.crate.sys.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record11;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.util.crate.sys.tables.Repositories;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepositoriesRecord extends UpdatableRecordImpl<RepositoriesRecord> implements Record3<String, Object, String> {

    private static final long serialVersionUID = 1138612589;

    /**
     * Setter for <code>sys.repositories.name</code>.
     */
    public void setName(String value) {
        setValue(0, value);
    }

    /**
     * Getter for <code>sys.repositories.name</code>.
     */
    public String getName() {
        return (String) getValue(0);
    }

    /**
     * Setter for <code>sys.repositories.settings</code>.
     */
    public void setSettings(Object value) {
        setValue(1, value);
    }

    /**
     * Getter for <code>sys.repositories.settings</code>.
     */
    public Object getSettings() {
        return (Object) getValue(1);
    }

    /**
     * Setter for <code>sys.repositories.type</code>.
     */
    public void setType(String value) {
        setValue(2, value);
    }

    /**
     * Getter for <code>sys.repositories.type</code>.
     */
    public String getType() {
        return (String) getValue(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record11<String, String, String, Integer, String, String, String, Integer, String, String, String> key() {
        return (Record11) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, Object, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, Object, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Repositories.REPOSITORIES.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Object> field2() {
        return Repositories.REPOSITORIES.SETTINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Repositories.REPOSITORIES.TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Object value2() {
        return getSettings();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoriesRecord value1(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoriesRecord value2(Object value) {
        setSettings(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoriesRecord value3(String value) {
        setType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RepositoriesRecord values(String value1, Object value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RepositoriesRecord
     */
    public RepositoriesRecord() {
        super(Repositories.REPOSITORIES);
    }

    /**
     * Create a detached, initialised RepositoriesRecord
     */
    public RepositoriesRecord(String name, Object settings, String type) {
        super(Repositories.REPOSITORIES);

        setValue(0, name);
        setValue(1, settings);
        setValue(2, type);
    }
}
