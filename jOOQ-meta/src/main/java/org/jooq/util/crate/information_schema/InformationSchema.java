/**
 * This class is generated by jOOQ
 */
package org.jooq.util.crate.information_schema;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;
import org.jooq.util.crate.information_schema.tables.Columns;
import org.jooq.util.crate.information_schema.tables.Routines;
import org.jooq.util.crate.information_schema.tables.Schemata;
import org.jooq.util.crate.information_schema.tables.TableConstraints;
import org.jooq.util.crate.information_schema.tables.TablePartitions;
import org.jooq.util.crate.information_schema.tables.Tables;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InformationSchema extends SchemaImpl {

    private static final long serialVersionUID = 1055557224;

    /**
     * The reference instance of <code>information_schema</code>
     */
    public static final InformationSchema INFORMATION_SCHEMA = new InformationSchema();

    /**
     * The table <code>information_schema.columns</code>.
     */
    public final Columns COLUMNS = org.jooq.util.crate.information_schema.tables.Columns.COLUMNS;

    /**
     * The table <code>information_schema.routines</code>.
     */
    public final Routines ROUTINES = org.jooq.util.crate.information_schema.tables.Routines.ROUTINES;

    /**
     * The table <code>information_schema.schemata</code>.
     */
    public final Schemata SCHEMATA = org.jooq.util.crate.information_schema.tables.Schemata.SCHEMATA;

    /**
     * The table <code>information_schema.table_constraints</code>.
     */
    public final TableConstraints TABLE_CONSTRAINTS = org.jooq.util.crate.information_schema.tables.TableConstraints.TABLE_CONSTRAINTS;

    /**
     * The table <code>information_schema.table_partitions</code>.
     */
    public final TablePartitions TABLE_PARTITIONS = org.jooq.util.crate.information_schema.tables.TablePartitions.TABLE_PARTITIONS;

    /**
     * The table <code>information_schema.tables</code>.
     */
    public final Tables TABLES = org.jooq.util.crate.information_schema.tables.Tables.TABLES;

    /**
     * No further instances allowed
     */
    private InformationSchema() {
        super("information_schema", null);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            Columns.COLUMNS,
            Routines.ROUTINES,
            Schemata.SCHEMATA,
            TableConstraints.TABLE_CONSTRAINTS,
            TablePartitions.TABLE_PARTITIONS,
            Tables.TABLES);
    }
}
