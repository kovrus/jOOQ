/**
 * This class is generated by jOOQ
 */
package org.jooq.util.crate.information_schema.tables;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;
import org.jooq.util.crate.information_schema.InformationSchema;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Columns extends TableImpl<Record> {

    private static final long serialVersionUID = 1230406012;

    /**
     * The reference instance of <code>information_schema.columns</code>
     */
    public static final Columns COLUMNS = new Columns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>information_schema.columns.column_name</code>.
     */
    public final TableField<Record, String> COLUMN_NAME = createField("column_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.columns.data_type</code>.
     */
    public final TableField<Record, String> DATA_TYPE = createField("data_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.columns.generation_expression</code>.
     */
    public final TableField<Record, String> GENERATION_EXPRESSION = createField("generation_expression", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.columns.is_generated</code>.
     */
    public final TableField<Record, Boolean> IS_GENERATED = createField("is_generated", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>information_schema.columns.ordinal_position</code>.
     */
    public final TableField<Record, Short> ORDINAL_POSITION = createField("ordinal_position", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>information_schema.columns.schema_name</code>.
     */
    public final TableField<Record, String> SCHEMA_NAME = createField("schema_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>information_schema.columns.table_name</code>.
     */
    public final TableField<Record, String> TABLE_NAME = createField("table_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>information_schema.columns</code> table reference
     */
    public Columns() {
        this("columns", null);
    }

    /**
     * Create an aliased <code>information_schema.columns</code> table reference
     */
    public Columns(String alias) {
        this(alias, COLUMNS);
    }

    private Columns(String alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Columns(String alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return InformationSchema.INFORMATION_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Columns as(String alias) {
        return new Columns(alias, this);
    }

    /**
     * Rename this table
     */
    public Columns rename(String name) {
        return new Columns(name, null);
    }
}
