/**
 * This class is generated by jOOQ
 */
package org.jooq.util.crate.sys.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.jooq.util.crate.sys.Keys;
import org.jooq.util.crate.sys.Sys;
import org.jooq.util.crate.sys.tables.records.RepositoriesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Repositories extends TableImpl<RepositoriesRecord> {

    private static final long serialVersionUID = -618760812;

    /**
     * The reference instance of <code>sys.repositories</code>
     */
    public static final Repositories REPOSITORIES = new Repositories();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepositoriesRecord> getRecordType() {
        return RepositoriesRecord.class;
    }

    /**
     * The column <code>sys.repositories.name</code>.
     */
    public final TableField<RepositoriesRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>sys.repositories.settings</code>.
     */
    public final TableField<RepositoriesRecord, Object> SETTINGS = createField("settings", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>sys.repositories.type</code>.
     */
    public final TableField<RepositoriesRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>sys.repositories</code> table reference
     */
    public Repositories() {
        this("repositories", null);
    }

    /**
     * Create an aliased <code>sys.repositories</code> table reference
     */
    public Repositories(String alias) {
        this(alias, REPOSITORIES);
    }

    private Repositories(String alias, Table<RepositoriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Repositories(String alias, Table<RepositoriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sys.SYS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RepositoriesRecord> getPrimaryKey() {
        return Keys.PRIMARY_KEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RepositoriesRecord>> getKeys() {
        return Arrays.<UniqueKey<RepositoriesRecord>>asList(Keys.PRIMARY_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Repositories as(String alias) {
        return new Repositories(alias, this);
    }

    /**
     * Rename this table
     */
    public Repositories rename(String name) {
        return new Repositories(name, null);
    }
}
